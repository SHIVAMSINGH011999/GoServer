// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package translation2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Translation2Client is the client API for Translation2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Translation2Client interface {
	Translate2(ctx context.Context, in *Translation2Input, opts ...grpc.CallOption) (*Translation2Output, error)
}

type translation2Client struct {
	cc grpc.ClientConnInterface
}

func NewTranslation2Client(cc grpc.ClientConnInterface) Translation2Client {
	return &translation2Client{cc}
}

func (c *translation2Client) Translate2(ctx context.Context, in *Translation2Input, opts ...grpc.CallOption) (*Translation2Output, error) {
	out := new(Translation2Output)
	err := c.cc.Invoke(ctx, "/protos.Translation2/Translate2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Translation2Server is the server API for Translation2 service.
// All implementations must embed UnimplementedTranslation2Server
// for forward compatibility
type Translation2Server interface {
	Translate2(context.Context, *Translation2Input) (*Translation2Output, error)
	mustEmbedUnimplementedTranslation2Server()
}

// UnimplementedTranslation2Server must be embedded to have forward compatible implementations.
type UnimplementedTranslation2Server struct {
}

func (UnimplementedTranslation2Server) Translate2(context.Context, *Translation2Input) (*Translation2Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate2 not implemented")
}
func (UnimplementedTranslation2Server) mustEmbedUnimplementedTranslation2Server() {}

// UnsafeTranslation2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Translation2Server will
// result in compilation errors.
type UnsafeTranslation2Server interface {
	mustEmbedUnimplementedTranslation2Server()
}

func RegisterTranslation2Server(s grpc.ServiceRegistrar, srv Translation2Server) {
	s.RegisterService(&Translation2_ServiceDesc, srv)
}

func _Translation2_Translate2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Translation2Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Translation2Server).Translate2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Translation2/Translate2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Translation2Server).Translate2(ctx, req.(*Translation2Input))
	}
	return interceptor(ctx, in, info, handler)
}

// Translation2_ServiceDesc is the grpc.ServiceDesc for Translation2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Translation2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Translation2",
	HandlerType: (*Translation2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Translate2",
			Handler:    _Translation2_Translate2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/translation2.proto",
}
